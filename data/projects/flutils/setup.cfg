# For information on how to setup this file, go to: https://bit.ly/2N1sVl0
[metadata]
name = flutils
version = attr: flutils.__version__
description = A collection of commonly used utility functions for Python projects.
long_description = file: README.rst
author = Finite Loop, LLC
author-email = info@finiteloopsoftware.com
license = BSD 3-Clause License
maintainer = Len Thomas
project_urls =
    Documentation = https://flutils.readthedocs.io/en/stable/?badge=stable
    Source code = https://gitlab.com/finite-loop/flutils

platform =
    linux,
    darwin
keywords = python library tools
# Listing of classifiers can be found at: https://bit.ly/2KeUY2D
classifier =
    Development Status :: 5 - Production/Stable
    Environment :: Console
    Environment :: Web Environment
    Environment :: Other Environment
    Intended Audience :: Developers
    License :: OSI Approved :: BSD License
    Natural Language :: English
    Operating System :: MacOS
    Operating System :: MacOS :: MacOS X
    Operating System :: POSIX :: Linux
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3 :: Only
    Topic :: Software Development :: Libraries
    Topic :: Utilities
    Typing :: Typed

[options]
zip_safe = False
packages = find:
test_suite = tests.suite
python_requires = >=3.6.0


[options.packages.find]
exclude =
    tests/*
    tox/*

[sdist]
formats = gztar

[mypy]
ignore_missing_imports = True
show_error_codes = True
color_output = True
pretty = True

[flake8]
max_line_length=79
# Error codes can be found at:
#   http://flake8.pycqa.org/en/latest/user/error-codes.html#error-violation-codes
#   https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes
ignore =
    # blank line at end of file
    W391
    # linebreak after binary operator
    W504
    # Undefined name
    F821
    # ambiguous variable name
    E741
exclude =
    __pycache__
    .pyi
count = True


[setup.command.tests]
description = Run the tests for this project.
commands =
    python -m unittest -v tests.suite

[setup.command.coverage]
description = Measure, collect, and report on Python code coverage in {name}.
commands =
    coverage run --rcfile={setup_dir}/.coveragerc {setup_dir}/setup.py test
    coverage report --rcfile={setup_dir}/.coveragerc
    coverage html --rcfile={setup_dir}/.coveragerc
    open -a 'Google Chrome' {setup_dir}/htmlcov/index.html

[setup.command.lint]
description = Verify that {name} satisfies coding standards via pylint.
command = pylint --rcfile={setup_dir}/.pylintrc {setup_dir}/{name}

[setup.command.pipelinetests]
description = Run the test pipeline of lint, style, and coverage
commands =
    pylint --rcfile={setup_dir}/.pylintrc {setup_dir}/{name}
    flake8 --count --config={setup_dir}/setup.cfg {setup_dir}/{name}
    bandit -f screen --ini {setup_dir}/.bandit --recursive {setup_dir}/flutils/
    coverage run --rcfile={setup_dir}/.coveragerc {setup_dir}/setup.py test
    coverage report --rcfile={setup_dir}/.coveragerc

[setup.command.style]
description = Verify that {name} satisfies coding styles via flake8.
command = flake8 --count --config={setup_dir}/setup.cfg {setup_dir}/{name}

[setup.command.security]
description = Check {name} for security issues.
command = bandit -f screen --ini {setup_dir}/.bandit --recursive {setup_dir}/flutils/


[setup.command.format]
description = Format {name} Python files using autopep8 and isort
commands =
    autopep8 --verbose --in-place --recursive {setup_dir}/tests/
    isort -fgw  -tc -k -m 3 -ac -rc --case-sensitive {setup_dir}/tests/
    autopep8 --verbose --in-place --recursive {setup_dir}/flutils/
    isort -fgw  -tc -k -m 3 -ac -rc --case-sensitive {setup_dir}/flutils/

[setup.command.docs]
description = Build the documentation for {name}.
commands =
    sphinx-build -M clean "{setup_dir}/docs" "{setup_dir}/docs/_build"
    sphinx-build -M html "{setup_dir}/docs" "{setup_dir}/docs/_build" --color



# There are additional commands that can be run via make.
#
# make python
#  Install the CPython versions with pyenv needed for development
#  and testing
#
# make tests
#   will use tox to run ./setup.py pipelinetests in multiple
#   Python versions.
#
# make sdist-push-test
#   Test build and push flutils to test.pypi
#
# make sdist-push
#   Test build and push flutils to pypi
#
# make clean
#   Clean up build and test files
#
# make help
#   Show information about all of the make commands
#

# When a new version of Python is released run the following commands:
#
#   make docker-image
#   make docker-image-push
#
# If a new major or minor version of Python is released make sure to add
# the version to the classifier variable above.
#
#
# When releasing a new version of flutils first build and push the code to
# test.pypi.org by doing:
#
#   make sdist-push-test
#
#
# Then after verifying the package on test.pypi.org, build and push the
# code to pypi.org by doing:
#
#  make sdist-push
#
#

